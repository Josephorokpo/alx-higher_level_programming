def test_matrix_divided():
    """
    Test cases for matrix_divided function.
    """
    # Test valid input
    matrix = [
        [1, 2, 3],
        [4, 5, 6]
    ]
    result = matrix_divided(matrix, 3)
    assert result == [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    # Test division by zero (should raise ZeroDivisionError)
    try:
        matrix_divided(matrix, 0)
    except ZeroDivisionError as e:
        assert str(e) == "division by zero"

    # Test invalid input (matrix contains non-integer and non-float)
    invalid_matrix = [
        [1, 2, 'three'],
        [4, 5, 6]
    ]
    try:
        matrix_divided(invalid_matrix, 2)
    except TypeError as e:
        assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

    # Test invalid input (matrix with rows of different lengths)
    invalid_matrix = [
        [1, 2, 3],
        [4, 5]
    ]
    try:
        matrix_divided(invalid_matrix, 2)
    except TypeError as e:
        assert str(e) == "Each row of the matrix must have the same size"

    # Test invalid input (div is a string)
    try:
        matrix_divided(matrix, "2")
    except TypeError as e:
        assert str(e) == "div must be a number (integer or float)"

    # Test valid input with negative div
    result = matrix_divided(matrix, -2)
    assert result == [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

    print("All test cases passed!")

if __name__ == "__main__":
    test_matrix_divided()
